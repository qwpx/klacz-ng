{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
module IRC (protoInfo, fileDescriptorProto) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)
 
protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".IRC\", haskellPrefix = [], parentModule = [], baseName = MName \"IRC\"}, protoFilePath = [\"IRC.hs\"], protoSource = \"irc.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".IRC.IrcMessage\", haskellPrefix = [], parentModule = [MName \"IRC\"], baseName = MName \"IrcMessage\"}, descFilePath = [\"IRC\",\"IrcMessage.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".IRC.IrcMessage.command\", haskellPrefix' = [], parentModule' = [MName \"IRC\",MName \"IrcMessage\"], baseName' = FName \"command\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".IRC.IrcMessage.prefix\", haskellPrefix' = [], parentModule' = [MName \"IRC\",MName \"IrcMessage\"], baseName' = FName \"prefix\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".IRC.IrcMessage.params\", haskellPrefix' = [], parentModule' = [MName \"IRC\",MName \"IrcMessage\"], baseName' = FName \"params\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".IRC.GatewayCommand\", haskellPrefix = [], parentModule = [MName \"IRC\"], baseName = MName \"GatewayCommand\"}, descFilePath = [\"IRC\",\"GatewayCommand.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".IRC.GatewayCommand.command\", haskellPrefix' = [], parentModule' = [MName \"IRC\",MName \"GatewayCommand\"], baseName' = FName \"command\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".IRC.GatewayCommand.params\", haskellPrefix' = [], parentModule' = [MName \"IRC\",MName \"GatewayCommand\"], baseName' = FName \"params\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".IRC.GatewayCommand.rest\", haskellPrefix' = [], parentModule' = [MName \"IRC\",MName \"GatewayCommand\"], baseName' = FName \"rest\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".IRC.UserCommand\", haskellPrefix = [], parentModule = [MName \"IRC\"], baseName = MName \"UserCommand\"}, descFilePath = [\"IRC\",\"UserCommand.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".IRC.UserCommand.caller\", haskellPrefix' = [], parentModule' = [MName \"IRC\",MName \"UserCommand\"], baseName' = FName \"caller\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".IRC.UserCommand.replyTo\", haskellPrefix' = [], parentModule' = [MName \"IRC\",MName \"UserCommand\"], baseName' = FName \"replyTo\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".IRC.UserCommand.command\", haskellPrefix' = [], parentModule' = [MName \"IRC\",MName \"UserCommand\"], baseName' = FName \"command\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".IRC.UserCommand.args\", haskellPrefix' = [], parentModule' = [MName \"IRC\",MName \"UserCommand\"], baseName' = FName \"args\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 34}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False}], enums = [], knownKeyMap = fromList []}"
 
fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\223\SOH\n\tirc.proto\DC2\ETXIRC\"=\n\nIrcMessage\DC2\SI\n\acommand\CAN\SOH \SOH(\t\DC2\SO\n\ACKprefix\CAN\STX \SOH(\t\DC2\SO\n\ACKparams\CAN\ETX \ETX(\t\"?\n\SOGatewayCommand\DC2\SI\n\acommand\CAN\SOH \SOH(\t\DC2\SO\n\ACKparams\CAN\STX \ETX(\t\DC2\f\n\EOTrest\CAN\ETX \SOH(\t\"M\n\vUserCommand\DC2\SO\n\ACKcaller\CAN\SOH \SOH(\t\DC2\SI\n\areplyTo\CAN\STX \SOH(\t\DC2\SI\n\acommand\CAN\ETX \SOH(\t\DC2\f\n\EOTargs\CAN\EOT \SOH(\t")