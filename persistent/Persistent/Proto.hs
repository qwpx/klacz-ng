{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
module Persistent.Proto (protoInfo, fileDescriptorProto) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)
 
protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".Persistent.Proto\", haskellPrefix = [], parentModule = [MName \"Persistent\"], baseName = MName \"Proto\"}, protoFilePath = [\"Persistent\",\"Proto.hs\"], protoSource = \"persistent.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".Persistent.Proto.Term\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"Term\"}, descFilePath = [\"Persistent\",\"Proto\",\"Term.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.Term.id\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"Term\"], baseName' = FName \"id\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.Term.name\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"Term\"], baseName' = FName \"name\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Persistent.Proto.Entry\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"Entry\"}, descFilePath = [\"Persistent\",\"Proto\",\"Entry.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.Entry.id\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"Entry\"], baseName' = FName \"id\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.Entry.author\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"Entry\"], baseName' = FName \"author\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.Entry.text\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"Entry\"], baseName' = FName \"text\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.Entry.date_added\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"Entry\"], baseName' = FName \"date_added\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 34}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.Entry.term_id\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"Entry\"], baseName' = FName \"term_id\"}, fieldNumber = FieldId {getFieldId = 5}, wireTag = WireTag {getWireTag = 40}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 3}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Persistent.Proto.CreateTermRequest\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"CreateTermRequest\"}, descFilePath = [\"Persistent\",\"Proto\",\"CreateTermRequest.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.CreateTermRequest.name\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"CreateTermRequest\"], baseName' = FName \"name\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Persistent.Proto.CreateTermResponse\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"CreateTermResponse\"}, descFilePath = [\"Persistent\",\"Proto\",\"CreateTermResponse.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.CreateTermResponse.term\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"CreateTermResponse\"], baseName' = FName \"term\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Persistent.Proto.Term\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"Term\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Persistent.Proto.GetTermRequest\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"GetTermRequest\"}, descFilePath = [\"Persistent\",\"Proto\",\"GetTermRequest.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.GetTermRequest.name\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"GetTermRequest\"], baseName' = FName \"name\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Persistent.Proto.GetTermResponse\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"GetTermResponse\"}, descFilePath = [\"Persistent\",\"Proto\",\"GetTermResponse.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.GetTermResponse.term\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"GetTermResponse\"], baseName' = FName \"term\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Persistent.Proto.Term\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"Term\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Persistent.Proto.CreateEntryRequest\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"CreateEntryRequest\"}, descFilePath = [\"Persistent\",\"Proto\",\"CreateEntryRequest.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.CreateEntryRequest.term\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"CreateEntryRequest\"], baseName' = FName \"term\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Persistent.Proto.Term\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"Term\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.CreateEntryRequest.author\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"CreateEntryRequest\"], baseName' = FName \"author\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.CreateEntryRequest.text\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"CreateEntryRequest\"], baseName' = FName \"text\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Persistent.Proto.CreateEntryResponse\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"CreateEntryResponse\"}, descFilePath = [\"Persistent\",\"Proto\",\"CreateEntryResponse.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.CreateEntryResponse.entry\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"CreateEntryResponse\"], baseName' = FName \"entry\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Persistent.Proto.Entry\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"Entry\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Persistent.Proto.GetEntriesRequest\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"GetEntriesRequest\"}, descFilePath = [\"Persistent\",\"Proto\",\"GetEntriesRequest.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.GetEntriesRequest.term\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"GetEntriesRequest\"], baseName' = FName \"term\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Persistent.Proto.Term\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"Term\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Persistent.Proto.GetEntriesResponse\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"GetEntriesResponse\"}, descFilePath = [\"Persistent\",\"Proto\",\"GetEntriesResponse.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Persistent.Proto.GetEntriesResponse.entries\", haskellPrefix' = [], parentModule' = [MName \"Persistent\",MName \"Proto\",MName \"GetEntriesResponse\"], baseName' = FName \"entries\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 10}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Persistent.Proto.Entry\", haskellPrefix = [], parentModule = [MName \"Persistent\",MName \"Proto\"], baseName = MName \"Entry\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False}], enums = [], knownKeyMap = fromList []}"
 
fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\222\a\n\DLEpersistent.proto\DC2\DLEPersistent.Proto\" \n\EOTTerm\DC2\n\n\STXid\CAN\SOH \SOH(\ETX\DC2\f\n\EOTname\CAN\STX \SOH(\t\"V\n\ENQEntry\DC2\n\n\STXid\CAN\SOH \SOH(\ETX\DC2\SO\n\ACKauthor\CAN\STX \SOH(\t\DC2\f\n\EOTtext\CAN\ETX \SOH(\t\DC2\DC2\n\ndate_added\CAN\EOT \SOH(\t\DC2\SI\n\aterm_id\CAN\ENQ \SOH(\ETX\"!\n\DC1CreateTermRequest\DC2\f\n\EOTname\CAN\SOH \SOH(\t\":\n\DC2CreateTermResponse\DC2$\n\EOTterm\CAN\SOH \SOH(\v2\SYN.Persistent.Proto.Term\"\RS\n\SOGetTermRequest\DC2\f\n\EOTname\CAN\SOH \SOH(\t\"7\n\SIGetTermResponse\DC2$\n\EOTterm\CAN\SOH \SOH(\v2\SYN.Persistent.Proto.Term\"X\n\DC2CreateEntryRequest\DC2$\n\EOTterm\CAN\SOH \SOH(\v2\SYN.Persistent.Proto.Term\DC2\SO\n\ACKauthor\CAN\STX \SOH(\t\DC2\f\n\EOTtext\CAN\ETX \SOH(\t\"=\n\DC3CreateEntryResponse\DC2&\n\ENQentry\CAN\SOH \SOH(\v2\ETB.Persistent.Proto.Entry\"9\n\DC1GetEntriesRequest\DC2$\n\EOTterm\CAN\SOH \SOH(\v2\SYN.Persistent.Proto.Term\">\n\DC2GetEntriesResponse\DC2(\n\aentries\CAN\SOH \ETX(\v2\ETB.Persistent.Proto.Entry2\241\STX\n\DC1PersistentService\DC2W\n\nCreateTerm\DC2#.Persistent.Proto.CreateTermRequest\SUB$.Persistent.Proto.CreateTermResponse\DC2N\n\aGetTerm\DC2 .Persistent.Proto.GetTermRequest\SUB!.Persistent.Proto.GetTermResponse\DC2Z\n\vCreateEntry\DC2$.Persistent.Proto.CreateEntryRequest\SUB%.Persistent.Proto.CreateEntryResponse\DC2W\n\nGetEntries\DC2#.Persistent.Proto.GetEntriesRequest\SUB$.Persistent.Proto.GetEntriesResponse")